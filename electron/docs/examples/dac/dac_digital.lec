import $add, $dff, $mux, $not from "../cells"

module Add(WIDTH: Integer) {
    input[WIDTH] A, B
    output[WIDTH] Y
    cell add = $add(A_WIDTH=WIDTH, B_WIDTH=WIDTH) {*}
}

module Integrator(WIDTH: Integer) {
    @clock
    input clk
    input A
    net delay_in
    net fb
    cell add = Add(WIDTH) {A, B=fb, Y=delay_in}
    cell delay = $dff(WIDTH) {D=delay_in, Q=fb}
    output Y=fb
}

/// DACDigital implements a Delta Sigma Modulator
/// for use by a Digital Analog Converter
export module DACDigital(WIDTH: Integer) {
    @clock
    input clk
    input dac_clk
    input[WIDTH] data
    output out, out_inv

    // TODO: Do some kind of synchronization
    //   data is clocked at clk
    //   but our outputs and integrator is clocked at dac_clk

    // An integrator is the core of a
    // delta sigma modulator
    const INTEGRATOR_WIDTH = WIDTH + 1
    net integrator_in, integrator_out
    @clock(dac_clk)
    cell int = Integrator(WIDTH=INTEGRATOR_WIDTH) {
        A=integrator_in,
        Y=integrator_out,
    }

    // When MSB is set we reset the MSB by overflowing
    // the register
    net mux_out
    cell mux = $mux(WIDTH=INTEGRATOR_WIDTH) {
        S=out,
        A=1 << WIDTH,
        B=0,
        Y=mux_out,
    }
    cell adder = Add(WIDTH=INTEGRATOR_WIDTH) {
        A=data,
        B=mux_out,
        Y=integrator_in,
    }

    // Set the output register
    net msb = integrator_out[WIDTH]
    net msb_inv
    cell not = $not() { A=msb, Y=msb_inv }
    @clock(dac_clk)
    cell outReg = $dff(WIDTH=2) {
        D=(msb, msb_inv),
        Q=(out, out_inv)
    }
}