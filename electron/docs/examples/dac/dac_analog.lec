import $R, $C, $L, $D, $M from "../cells"

module RCFilter(R: Ohm, C: Farad) {
    /// First order lowpass filter
    @left analog in
    @right analog out
    @bottom analog gnd
    cell r = $R(R) {A=in, B=out}
    @rotate(90)
    cell c = $C(C) {A=out, B=gnd}
}

module LCFilter(L: Henry, C: Farad) {
    /// Second order lowpass filter
    @left analog in
    @right analog out
    @bottom analog gnd
    cell l = $L(L) {A=in, B=out}
    @rotate(90)
    cell c = $C(C) {A=out, B=gnd}
}

module HalfBridge {
    @left analog in, in_inv
    @right analog out
    @top analog vdd
    @bottom analog vss

    @model(PowerMosfetModel)
    cell[2] drivers = (
        $M() {G=in_inv, D=vdd, S=out},
        $M() {G=in, D=out, S=vss}
    )
}

module PowerMosfetModel {
    analog G, D, S

    // Gate parasitics
    net rb, lb, g
    cell Rb = $R() {A=G, B=rb}
    cell Lb = $L() {A=rb, B=g}

    // Drain parasitics
    net rd, ld, d
    @rotate(90)
    cell Rd = $R() {A=G, B=rd}
    @rotate(90)
    cell Ld = $L() {A=rd, B=d}

    // Source parastitics
    net rs, ls, s
    @rotate(270)
    cell Rs = $R() {A=S, B=rs}
    @rotate(270)
    cell Ls = $R() {A=rs, B=s}

    // Ideal mosfet
    cell mos = $M() {G=g, D=d, S=s}

    // Parasitic diode
    @rotate(270)
    cell Dsd = $D() {A=d, K=s}
}

export module DACAnalog(L: Henry, C: Farad) {
    @left analog in, in_inv
    @right analog out
    @top analog vdd
    @bottom analog vss
    net hbout
    cell halfBridge = HalfBridge() {
        in, in_inv=in_inv, out=hbout,
        vdd, vss
    }
    cell lc = LCFilter(L, C) {in=hbout, out=out}
}